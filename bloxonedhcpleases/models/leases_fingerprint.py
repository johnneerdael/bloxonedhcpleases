# coding: utf-8

"""
    DHCP Leases API

    The DHCP Leases application is a BloxOne DDI service that stores information about leases. Please note that hosts are authoritative for their lease data. Changes to leases are periodically replicated to the cloud and stored by this service for display purposes. There is no lease history, so only current leases are available. In other words, every dhcp/host_lease or dhcp/lease for that matter, represents a lease that is currently active. Note that fixed addresses do not have leases.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LeasesFingerprint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'str',
        'comment': 'str',
        'defined_by': 'str',
        'id': 'str',
        'inheritance_sources': 'LeasesFingerprintInheritance',
        'name': 'str',
        'rules': 'list[LeasesFingerprintRule]',
        'share_fingerprint': 'bool',
        'tags': 'TypesJSONValue'
    }

    attribute_map = {
        '_class': 'class',
        'comment': 'comment',
        'defined_by': 'defined_by',
        'id': 'id',
        'inheritance_sources': 'inheritance_sources',
        'name': 'name',
        'rules': 'rules',
        'share_fingerprint': 'share_fingerprint',
        'tags': 'tags'
    }

    def __init__(self, _class=None, comment=None, defined_by=None, id=None, inheritance_sources=None, name=None, rules=None, share_fingerprint=None, tags=None):  # noqa: E501
        """LeasesFingerprint - a model defined in Swagger"""  # noqa: E501

        self.__class = None
        self._comment = None
        self._defined_by = None
        self._id = None
        self._inheritance_sources = None
        self._name = None
        self._rules = None
        self._share_fingerprint = None
        self._tags = None
        self.discriminator = None

        if _class is not None:
            self._class = _class
        if comment is not None:
            self.comment = comment
        if defined_by is not None:
            self.defined_by = defined_by
        if id is not None:
            self.id = id
        if inheritance_sources is not None:
            self.inheritance_sources = inheritance_sources
        if name is not None:
            self.name = name
        if rules is not None:
            self.rules = rules
        if share_fingerprint is not None:
            self.share_fingerprint = share_fingerprint
        if tags is not None:
            self.tags = tags

    @property
    def _class(self):
        """Gets the _class of this LeasesFingerprint.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The _class of this LeasesFingerprint.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this LeasesFingerprint.

        The resource identifier.  # noqa: E501

        :param _class: The _class of this LeasesFingerprint.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def comment(self):
        """Gets the comment of this LeasesFingerprint.  # noqa: E501

        Comment of the fingerprint if any.  # noqa: E501

        :return: The comment of this LeasesFingerprint.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this LeasesFingerprint.

        Comment of the fingerprint if any.  # noqa: E501

        :param comment: The comment of this LeasesFingerprint.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def defined_by(self):
        """Gets the defined_by of this LeasesFingerprint.  # noqa: E501

        If this fingerprint was defined by the user or if it was defined by Infoblox.  # noqa: E501

        :return: The defined_by of this LeasesFingerprint.  # noqa: E501
        :rtype: str
        """
        return self._defined_by

    @defined_by.setter
    def defined_by(self, defined_by):
        """Sets the defined_by of this LeasesFingerprint.

        If this fingerprint was defined by the user or if it was defined by Infoblox.  # noqa: E501

        :param defined_by: The defined_by of this LeasesFingerprint.  # noqa: E501
        :type: str
        """

        self._defined_by = defined_by

    @property
    def id(self):
        """Gets the id of this LeasesFingerprint.  # noqa: E501

        The resource identifier.  # noqa: E501

        :return: The id of this LeasesFingerprint.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LeasesFingerprint.

        The resource identifier.  # noqa: E501

        :param id: The id of this LeasesFingerprint.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def inheritance_sources(self):
        """Gets the inheritance_sources of this LeasesFingerprint.  # noqa: E501

        Inheritance implementation for share_fingerprint field.  # noqa: E501

        :return: The inheritance_sources of this LeasesFingerprint.  # noqa: E501
        :rtype: LeasesFingerprintInheritance
        """
        return self._inheritance_sources

    @inheritance_sources.setter
    def inheritance_sources(self, inheritance_sources):
        """Sets the inheritance_sources of this LeasesFingerprint.

        Inheritance implementation for share_fingerprint field.  # noqa: E501

        :param inheritance_sources: The inheritance_sources of this LeasesFingerprint.  # noqa: E501
        :type: LeasesFingerprintInheritance
        """

        self._inheritance_sources = inheritance_sources

    @property
    def name(self):
        """Gets the name of this LeasesFingerprint.  # noqa: E501

        Name of the fingerprint.  # noqa: E501

        :return: The name of this LeasesFingerprint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LeasesFingerprint.

        Name of the fingerprint.  # noqa: E501

        :param name: The name of this LeasesFingerprint.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rules(self):
        """Gets the rules of this LeasesFingerprint.  # noqa: E501


        :return: The rules of this LeasesFingerprint.  # noqa: E501
        :rtype: list[LeasesFingerprintRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this LeasesFingerprint.


        :param rules: The rules of this LeasesFingerprint.  # noqa: E501
        :type: list[LeasesFingerprintRule]
        """

        self._rules = rules

    @property
    def share_fingerprint(self):
        """Gets the share_fingerprint of this LeasesFingerprint.  # noqa: E501

        If this fingerprint should be shared with Infoblox.  This only makes sense for custom fingerprints. The default for custom fingerprints is \"shared\" or true. The value could be inherited from dhcp/global_lease.  # noqa: E501

        :return: The share_fingerprint of this LeasesFingerprint.  # noqa: E501
        :rtype: bool
        """
        return self._share_fingerprint

    @share_fingerprint.setter
    def share_fingerprint(self, share_fingerprint):
        """Sets the share_fingerprint of this LeasesFingerprint.

        If this fingerprint should be shared with Infoblox.  This only makes sense for custom fingerprints. The default for custom fingerprints is \"shared\" or true. The value could be inherited from dhcp/global_lease.  # noqa: E501

        :param share_fingerprint: The share_fingerprint of this LeasesFingerprint.  # noqa: E501
        :type: bool
        """

        self._share_fingerprint = share_fingerprint

    @property
    def tags(self):
        """Gets the tags of this LeasesFingerprint.  # noqa: E501

        Tagging specifics.  # noqa: E501

        :return: The tags of this LeasesFingerprint.  # noqa: E501
        :rtype: TypesJSONValue
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LeasesFingerprint.

        Tagging specifics.  # noqa: E501

        :param tags: The tags of this LeasesFingerprint.  # noqa: E501
        :type: TypesJSONValue
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeasesFingerprint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeasesFingerprint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
